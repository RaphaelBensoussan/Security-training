name: Security Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  security:
    runs-on: ubuntu-latest

    steps:
      # Étape 1 : Vérifier le code source
      - name: Checkout code
        uses: actions/checkout@v3

      # Étape 2 : Configurer Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # Étape 3 : Installer les dépendances
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Étape 4 : Analyse de sécurité avec Snyk
      - name: Install Snyk CLI
        run: npm install -g snyk

      - name: Authenticate Snyk
        run: snyk auth ${{ secrets.SNYK_TOKEN }}

      - name: Snyk Code Analysis
        uses: snyk/actions/setup@master
        with:
          token: ${{ secrets.SNYK_TOKEN }}

      - name: Run Snyk Test
        run: snyk test --all-projects --json > snyk_report.json

      # Étape 5 : Analyse des mots de passe en dur avec Gitleaks.
      - name: Install GitLeaks
        run: |
          curl -s https://api.github.com/repos/gitleaks/gitleaks/releases/latest \
            | grep "browser_download_url.*linux_x64.tar.gz" \
            | cut -d : -f 2,3 \
            | tr -d \" \
            | wget -qi - 
          tar -xvzf gitleaks*.tar.gz
          sudo mv gitleaks /usr/local/bin/
          rm gitleaks*.tar.gz

      - name: Run GitLeaks scan
        run: gitleaks detect --source . --report-format sarif --report-path gitleaks.sarif

      # Étape 6 : Analyse des vulnérabilités Docker avec Trivy
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Pull Docker image
        run: docker pull ${{ secrets.DOCKER_USERNAME }}/devsecure-api:latest

      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install -y curl
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin

      - name: Run Trivy scan
        run: trivy image ${{ secrets.DOCKER_USERNAME }}/devsecure-api:latest --format json > trivy_report.json

      # Étape 7 : Générer un rapport HTML
      - name: Generate HTML Report
        run: |
          echo "<html><head><title>Security Pipeline Report</title></head><body>" > report.html
          echo "<h1>Security Pipeline Report</h1>" >> report.html
          
          # Ajouter les résultats de Snyk
          echo "<h2>Snyk Report</h2>" >> report.html
          echo "<pre>" >> report.html
          cat snyk_report.json >> report.html
          echo "</pre>" >> report.html
          
          # Ajouter les résultats de GitLeaks
          echo "<h2>GitLeaks Report</h2>" >> report.html
          echo "<pre>" >> report.html
          cat gitleaks.sarif >> report.html
          echo "</pre>" >> report.html
          
          # Ajouter les résultats de Trivy
          echo "<h2>Trivy Report</h2>" >> report.html
          echo "<pre>" >> report.html
          cat trivy_report.json >> report.html
          echo "</pre>" >> report.html
          
          echo "</body></html>" >> report.html

      # Étape 8 : Upload the report as an artifact (Optional)
      - name: Upload Report as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: report.html
